# Fast O(n) solution using a dictionary
def solution(lt):
    counts = {}

    for item in l:
        if item in counts:
            counts[item] += 1
        else:
            counts[item] = 1

    for item in l: # for key in counts:
        if counts[item] == 1: # if counts[key] == 1:
            return item # return key
    return -1

print(solution([1,2,1,3,2,5])) # prints 3
print(solution([1,2,1,3,3,2,5])) # prints 5
print(solution([1,2,1,3,3,2,5,5])) # prints -1
print(solution([7])) # prints 7

# dictionaries are unordered but because of the 2nd for loop
# we use the original list as an "order"
# and thus we return the first unique element
# we can also use "for key in counts" & check if counts[key] == 1
# because counts was constructed based on the list and is technically ordered

# if we need the INDEX of the first unique element, we just need to return
# l.index(item) or l.index(key) depending on which for loop we use
# the .index() method returns the first idx of that element
# and there's only 1 number it can return since item/key is a unique element

# iterating through the dictionary keys might be faster than iterating through
# the list because the list can have a lot of repeating elements before the first
# unique element (but it's a negligible difference)

# ie: the first example's list is 6 elements long while the dictionary would be 4
# elements long, in the 4th example, both the list & dictionary are just 1 element long
